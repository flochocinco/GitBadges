<?xml version="1.0"?>
<project name="GitBadges" default="jar">

  <!-- Project-specific configuration -->
  <loadproperties srcfile="project.properties"/>
  <property name="main.class" value="${package.main}.${ant.project.name}"/>
  <property name="base.name" value="${artifactId}-${version}"/>

  <!-- Standard Directory Layout -->
  <property name="src.dir" value="src"/>
  <property name="test.dir" value="test"/>
  <property name="build.dir" value="build"/>
  <property name="dist.dir" value="dist"/>

  <!-- Targets -->

  <target name="compile" description="Compile all sources.">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${build.dir}/classes"/>
    <javac srcdir="${src.dir}" destdir="${build.dir}/classes"
           optimize="on" debug="on" deprecation="on" includeantruntime="no">
      <compilerarg value="-Xlint"/>
    </javac>
    <copy todir="${build.dir}/classes">
      <fileset dir="${src.dir}" excludes="**/*.java"/>
    </copy>
  </target>
  
  <target name="jar" depends="compile"
          description="Generate the jarfile distributable.">
    <jar destfile="${dist.dir}/${base.name}.jar"
         basedir="${build.dir}/classes">
      <manifest>
        <attribute name="Main-Class" value="${main.class}"/>
      </manifest>
    </jar>
    <jar destfile="${dist.dir}/${base.name}-all.jar"
         basedir="${build.dir}/classes">
      <zipgroupfileset refid="runtime.fileset"/>
      <manifest>
        <attribute name="Main-Class" value="${main.class}"/>
      </manifest>
    </jar>
  </target>

  <target name="run" depends="compile" description="Run the application.">
    <java classname="${main.class}" classpath="${build.dir}/classes" fork="yes">
      <classpath refid="runtime.classpath"/>
      <arg value="--name"/>
      <arg value="Java"/>
    </java>
  </target>

  <target name="clean" description="Delete all generated files.">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete file="cache.properties"/>
  </target>

  <target name="javadoc" depends="compile"
          description="Generate documentation.">
    <taskdef classname="lombok.delombok.ant.DelombokTask" name="delombok"
             classpathref="build.classpath"/>
    <delombok verbose="true" to="${build.dir}/src" from="${src.dir}">
      <classpath refid="build.classpath"/>
    </delombok>
    <javadoc destdir="${dist.dir}/javadoc"
             link="http://download.oracle.com/javase/6/docs/api/"
             sourcepath="${build.dir}/src"
             Doctitle="${ant.project.name} ${version}"
             Windowtitle="${ant.project.name} ${version}">
      <classpath refid="build.classpath"/>
    </javadoc>
  </target>

  <!-- Unit testing (JUnit) -->

  <target name="test-compile" depends="compile">
    <mkdir dir="${build.dir}/test"/>
    <javac srcdir="${test.dir}" destdir="${build.dir}/test"
           optimize="on" debug="on" deprecation="on"
           classpath="${build.dir}/classes" includeantruntime="no">
      <fileset dir="lib" includes="*.jar"/>
      <compilerarg value="-Xlint"/>
    </javac>
    <copy todir="${build.dir}/test">
      <fileset dir="${test.dir}" excludes="**/*.java"/>
    </copy>
    <!-- Test coverage -->
    <taskdef classpathref="test.classpath" resource="tasks.properties"/>
    <cobertura-instrument todir="${build.dir}/instrumented"
                          datafile="${build.dir}/cobertura.ser">
      <fileset dir="${build.dir}/classes">
        <include name="**/*.class"/>
      </fileset>
    </cobertura-instrument>
  </target>

  <target name="test" depends="test-compile" description="Run the unit tests.">
    <junit fork="yes">
      <classpath>
        <pathelement path="${build.dir}/instrumented"/>
        <pathelement path="${build.dir}/classes"/>
        <pathelement path="${build.dir}/test"/>
        <fileset dir="lib" includes="*.jar"/>
        <path refid="test.classpath"/>
      </classpath>
      <sysproperty key="net.sourceforge.cobertura.datafile"
                   file="${build.dir}/cobertura.ser"/>
      <batchtest>
        <formatter type="brief" usefile="false"/>
        <fileset dir="${build.dir}/test"/>
      </batchtest>
    </junit>
    <cobertura-report srcdir="${src.dir}" destdir="${dist.dir}/test"
                      datafile="${build.dir}/cobertura.ser"/>
  </target>

  <!-- Maven repository support -->

  <target name="bundle" depends="jar,javadoc"
          description="Stage a Maven repository bundle.">
    <!-- Pack up the artifacts -->
    <filter filtersfile="project.properties"/>
    <filter token="ant.project.name" value="${ant.project.name}"/>
    <copy file="pom.xml" filtering="true"
          tofile="${dist.dir}/bundle/${base.name}.pom"/>
    <copy file="${dist.dir}/${base.name}.jar" todir="${dist.dir}/bundle/"/>
    <jar jarfile="${dist.dir}/bundle/${base.name}-javadoc.jar">
      <fileset dir="${dist.dir}/javadoc"/>
    </jar>
    <jar jarfile="${dist.dir}/bundle/${base.name}-sources.jar">
      <fileset dir="${src.dir}"/>
    </jar>
    <!-- Sign all the things. You'll need gpg-agent help here. -->
    <apply executable="gpg" failonerror="true">
      <arg value="--detach-sign"/>
      <arg value="--armor"/>
      <fileset dir="${dist.dir}/bundle"/>
    </apply>
    <!-- Pack it all up -->
    <jar destfile="${dist.dir}/bundle.jar" basedir="${dist.dir}/bundle"/>
  </target>
</project>
